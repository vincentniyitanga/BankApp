/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.weber.cs3230.projects.finalproject;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zycmm
 */
public class ShowAccountsFrame extends javax.swing.JFrame {

    /**
     * Creates new form ShowAccountsFrame
     */
    public ShowAccountsFrame(Customer customer, List<Customer> customers) {
        initComponents();
        setLocationRelativeTo(null);
        this.customer = customer;
        this.customers = customers;
        
        // show customer details
        customerDetailsLabel.setText(customer.getFirstName() + " " + customer.getLastName() + ", Phone: " + customer.getPhoneNumber() );
        showAccountsInTable();

        
    }

    private void showAccountsInTable()
    {
        DefaultTableModel tableModel = (DefaultTableModel)accountsTable.getModel();
        for (int i = 0; i < customer.getBankAccounts().size(); i++) {
            BankAccount account = customer.getBankAccounts().get(i);
            String type = "";
            if(account instanceof CheckingAccount)
            {
                type = "Checking Account";
            }
            else if(account instanceof SavingsAccount)
            {
                type = "Savings Account";
                
            }
            else if(account instanceof InvestmentAccount)
            {
                type = "Investment Account";
            }
            
            tableModel.addRow(new Object[]{account.getAccountNumber(), account.getBalance(), type});
        }
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        depositButton = new javax.swing.JButton();
        customerDetailsLabel = new javax.swing.JLabel();
        withdrawButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        customerDetailsLabel.setText("Customer Name, Phone Number");

        withdrawButton.setText("Withdraw");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        transferButton.setText("Transfer");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });

        accountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account Number", "Balance", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountsTable.setColumnSelectionAllowed(true);
        accountsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(accountsTable);
        accountsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerDetailsLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(depositButton)
                                .addGap(18, 18, 18)
                                .addComponent(withdrawButton)
                                .addGap(18, 18, 18)
                                .addComponent(transferButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerDetailsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositButton)
                    .addComponent(withdrawButton)
                    .addComponent(transferButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed

        int selectedRow = accountsTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this, "Select an account before clicking deposit!", "Input Warnings", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            BankAccountRepository repo = new BankAccountRepository(customer.getBankAccounts());
            int accountNumber = (int)accountsTable.getValueAt(selectedRow, 0);
            BankAccount account = null;
            try {
                account = repo.findByAccountNumber(accountNumber);
            } catch (NoSuchBankAccountException ex) {
                Logger.getLogger(ShowAccountsFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            DepositDialog dialog = new DepositDialog(this, true, account);
            dialog.setVisible(true);
            updateAccountInTable(selectedRow);

        }

    }//GEN-LAST:event_depositButtonActionPerformed

    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawButtonActionPerformed
        int selectedRow = accountsTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this, "Select an account before clicking withdraw!", "Input Warnings", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            BankAccountRepository repo = new BankAccountRepository(customer.getBankAccounts());
            int accountNumber = (int)accountsTable.getValueAt(selectedRow, 0);
            BankAccount account = null;
            try {
                account = repo.findByAccountNumber(accountNumber);
            } catch (NoSuchBankAccountException ex) {
                Logger.getLogger(ShowAccountsFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WithdrawDialog dialog = new WithdrawDialog(this, true, account);
            dialog.setVisible(true);
            updateAccountInTable(selectedRow);

        }
        
        
    }//GEN-LAST:event_withdrawButtonActionPerformed

    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
        int selectedRow = accountsTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(this, "Select an account before clicking transfer!", "Input Warnings", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            BankAccountRepository repo = new BankAccountRepository(customer.getBankAccounts());
            int accountNumber = (int)accountsTable.getValueAt(selectedRow, 0);
            BankAccount account = null;
            try {
                account = repo.findByAccountNumber(accountNumber);
            } catch (NoSuchBankAccountException ex) {
                Logger.getLogger(ShowAccountsFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            TransferDialog dialog = new TransferDialog(this, true, account, customers);
            dialog.setVisible(true);
            updateAllAccountInTable();

        }
    }//GEN-LAST:event_transferButtonActionPerformed

    private void updateAllAccountInTable()
    {
        DefaultTableModel model = (DefaultTableModel) accountsTable.getModel();
        model.setRowCount(0);
        showAccountsInTable();
    }
    private void updateAccountInTable(int selectedRow)
    {
        BankAccountRepository repo = new BankAccountRepository(customer.getBankAccounts());
        int accountNumber = (int)accountsTable.getValueAt(selectedRow, 0);
        BankAccount account = null;
        try {
            account = repo.findByAccountNumber(accountNumber);
        } catch (NoSuchBankAccountException ex) {
            Logger.getLogger(ShowAccountsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel tableModel = (DefaultTableModel)accountsTable.getModel();
        tableModel.setValueAt(account.getBalance(), selectedRow, 1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountsTable;
    private javax.swing.JLabel customerDetailsLabel;
    private javax.swing.JButton depositButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton transferButton;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration//GEN-END:variables

    private Customer customer;
    private List<Customer> customers;
    private BankAccount account;

}
